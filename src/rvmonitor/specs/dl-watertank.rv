testDlWatertankSpec() {

    void pre_check_actions() {
	monitorState.currState.c = 0;
    }
    void post_check_actions(bool verdict) {
	if(!verdict)
	    monitorState.currState.f = 0.0;
    }

    void fallback(marti_common_msgs::Float32Stamped& message)
    {
	monitorState.currState.f = 0.0;
	message.value = 0.0;
    }

    void initializeParams()
    {
	monitorState.params.m = 1.0;
	monitorState.params.ep = 5.0;
    }


    event current_level(float l) /level_sensor std_msgs/Float32  '{data:l}'
    {
	update_l(static_cast<long double>(l));
    }

    event flow_controller_input(float f, int32_t t) /flow_control_cmd marti_common_msgs/Float32Stamped '{value:f, header:{stamp:{sec:t}}}'
    {
	update_f(static_cast<long double>(f));
	update_c(static_cast<long double>(cTime.toSec()));

	if(!check_violation( &rosmop_generated::testDlWatertankSpec::pre_check_actions
			   , &rosmop_generated::testDlWatertankSpec::post_check_actions) ) {
	    fallback(message);
	}
    }

    dL :
	Functions.
	  R m.
	  R ep.
	End.

	ProgramVariables.
	  R f.
	  R l.
	  R c.
	End.

	Problem.
	     (0 <= l & l <= m & 0 < ep)
	  -> [
	      { f :=*;
		?-1 <= f & f <= (m-l)/ep;
		c := 0;
		{ l' = f, c' = 1 & 0 <= l & c <= ep }
	      }*
	     ](0 <= l & l <= m)
	End.

    @violation {}
}
